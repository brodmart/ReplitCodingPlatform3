Introduction au génie   
e
informatique, 11  année 
cours préuniversitaire      ICS3U
Ce cours initie l’élève aux concepts fondamentaux de l’informatique et aux techniques   
de développement de logiciels. Dans le cadre de divers projets illustrant le cycle de vie 
d’un logiciel, l’élève développe des habiletés et une compréhension solide d’un langage 
de programmation en se familiarisant avec les outils et les techniques de développement 
de logiciels, notamment la résolution de problèmes, la conception d’algorithmes et 
l’assurance-qualité. Le cours amène également l’élève à explorer l’impact de l’industrie 
de l’informatique sur l’environnement et la santé publique ainsi que les possibilités de 
carrière et de formation professionnelle dans ce secteur.
Préalable :  Aucun

A.  Environn Em Ent inform Atiqu E  
  dE tr AvAil
 année e
1
ATTENTES
À la fin du cours, l’élève doit pouvoir :
A1.    expliquer le fonctionnement d’un ordinateur personnel en utilisant les termes justes en français.
A2.    appliquer des techniques de gestion de fichiers.
A3.    utiliser des outils appropriés pour développer des programmes.
CONTENUS  D’APPRENTISSAGE  
Pour satisfaire aux attentes, l’élève doit pouvoir :   Cours préuniversitaire, 1
A2.3  décrire plusieurs types de virus ( p. ex.,   Fonctionnement d’un   
attaque du système d’amorçage, macro dans un    ordinateur personnel
document de bureautique ) et autres programmes 
malveillants ( p. ex., cheval de Troie, logiciel  A1.1  expliquer les fonctions des composants 
espion ), leur cycle de vie ainsi que les contre- matériels internes d’un ordinateur personnel   
mesures de sécurité informatique connues    ( p. ex., carte mère, microprocesseur, mémoire vive, 
( p. ex., antivirus, coupe-feu, blocage des    carte vidéo, carte son ).
fenêtres, filtre antipourriel ). 
A1.2  expliquer les fonctions des périphériques 
A2.4  utiliser les services du réseau local    externes qui sont couramment utilisés ( p. ex., 
( p. ex., partage de fichier et d’imprimante,    souris, clavier, moniteur, imprimante, appareil 
centralisation du code et de l’échéancier ) pour  photo numérique, caméra, clé de mémoire ).
faciliter la gestion et la sauvegarde des fichiers 
A1.3  comparer les performances du matériel    lors du développement d’un programme.
informatique de divers ordinateurs person -
nels en utilisant des mesures objectives ( p. ex., 
fréquence du microprocesseur [en gigahertz],   Outils de développement
capacité de la mémoire vive [en gigaoctets],   
A3.1  comparer les principales fonctions des    consommation électrique [en watts] ).
systèmes d’exploitation ( p. ex., exécution de   
tudes informatiques A1.4  expliquer la relation fonctionnelle entre un  É
programmes, archivage de fichiers, contrôle d’accès ) 
  |   langage de programmation et les composants  et des logiciels d’application ( p. ex., traitement 
essentiels d’un ordinateur ( p. ex., enregistrement  de texte, lecture de courriels ), notamment des 
 ANNÉE et transfert de données, opération arithmétique,  outils de développement ( p. ex., compilateur,  e
calcul géométrique ). interpréteur) . 
 À LA 12 e A3.2  expliquer les caractéristiques et les avantages 
de divers environnements de développement    Gestion de fichiers
( p. ex., environnement de développement intégré 
A2.1  répertorier les fichiers d’un programme en  [EDI]; éditeur de texte spécialisé et interpréteur ) 
utilisant les fonctions du système d’exploitation.   pour développer des programmes.
A2.2  appliquer une procédure systématique    A3.3  utiliser les fonctions respectives d’un   
de sauvegarde des fichiers ( p. ex., archivage  compilateur ou d’un interpréteur. 
programmé de fichiers, copie manuelle sur une   
A3.4  utiliser l’aide disponible ( p. ex., fonction  clé de mémoire ou en ligne, utilisation d’un   
d’aide de l’EDI, tutoriel, aide en ligne ) pour  système de contrôle de versions ). 
développer des programmes.
E CURRICULUM DE L’ONTARIO, DE LA 10 L
48

B.  tE chniqu Es d E progr Amm Ation  Introduction au génie informatique
ATTENTES  
À la fin du cours, l’élève doit pouvoir :
B1.   appliquer les principales règles de syntaxe et de sémantique d’un langage de programmation.
B2.   expliquer des algorithmes et des structures de données élémentaires.
B3.   appliquer des techniques d’assurance-qualité logicielle.
CONTENUS  D’APPRENTISSAGE  
Pour satisfaire aux attentes, l’élève doit pouvoir :   
B2.3  expliquer le fonctionnement des structures    Syntaxe et sémantique
de contrôle – séquentielle, décisionnelle et   
itérative – d’un programme. B1.1  décrire les types de données primitifs   
définis par un langage de programmation 
B2.4   expliquer  des  algorithmes  qui permettent   de    donné ( p. ex., nombre entier, nombre décimal, 
traiter l’information entrée par une utilisatrice  caractère alphanumérique ).
ou un utilisateur et d’afficher le résultat    ICS3U
à l’écran. B1.2  décrire la représentation interne ( p. ex., code 
binaire, code ASCII, Unicode ) de divers types 
de données ( p. ex., nombre entier, caractère, 
  Assurance-qualité logicielle chaîne de caractères ).
B3.1  expliquer la différence entre les erreurs de  B1.3  définir les termes suivants : valeur littérale, 
logique, les erreurs de syntaxe et les erreurs  constante et variable.
d’exécution d’un programme.
B1.4  définir les concepts de portée et de durée   
B3.2  interpréter les messages d’erreur émis    de vie des variables.
par les environnements de développement 
B1.5  décrire différents types de fonctions ( p. ex.,  et d’exécution ( p. ex., compilateur, outil de 
fonction avec ou sans paramètres, avec ou sans  débogage, machine virtuelle ).
valeur de retour [procédure]; fonction récursive ).
B3.3  corriger des erreurs de logique, des erreurs 
B1.6  appliquer les règles de syntaxe fondamen - de syntaxe et des erreurs d’exécution d’un   
tales ( p. ex., déclaration de variables, usage des  programme.
opérateurs, appel de fonction ) d’un langage de 
B3.4  déterminer un ensemble de valeurs appro - programmation. 
priées pour tester l’exactitude d’un programme.
B1.7  rédiger des expressions utilisant des   
B3.5  déboguer des programmes à l’aide de    opérateurs ( p. ex., opérateur booléen, opérateur 
différe ntes méthodes ( p. ex., traçage , exécution  de comparaison, opérateur arithmétique ).
pas à pas, utilisation de points d’interruption, 
TECHNIQUES observation des variables, insertion d’instructions   
  Algorithmes et structures    dans le programme ).
 de données
B3.6  appliquer des règles de mise en page ( p. ex., 
tabulation ), de rédaction ( p. ex., commentaire )    B2.1  définir les caractéristiques d’un tableau à     DE
et de nomenclature ( p. ex., nom de variable ) au  une dimension telles que les éléments, l’indice   PROGRAMMATION
programme afin d’en assurer sa maintenance    et la taille.
et sa documentation.
B2.2   expliquer des algorithmes qui permettent de 
lire ou de modifier les éléments d’un tableau à 
une dimension.
49

c.  dév Elopp Em Ent d E logici Els
ATTENTES  
 année e
1 À la fin du cours, l’élève doit pouvoir :
c1.    appliquer des techniques de développement de logiciels. 
c2.    concevoir des algorithmes répondant aux problèmes donnés.
c3.    développer des programmes répondant aux problèmes donnés.
CONTENUS  D’APPRENTISSAGE  
Pour satisfaire aux attentes, l’élève doit pouvoir :
c2.2  concevoir des algorithmes de traitement des                Techniques de développement   
données ( p. ex., validation des données entrées  Cours préuniversitaire, 1   de logiciels
par l’utilisatrice ou l’utilisateur, manipulation des 
éléments d’un tableau ). c1.1  décrire les problèmes en termes de données 
d’entrée, de traitement de données et de   
c2.3  concevoir des imbrications de structures   
données de sortie.
de contrôle ( p. ex., structures décisionnelles 
imbriquées, utilisation d’une valeur sentinelle  c1.2  utiliser différentes approches pour résoudre 
dans une structure itérative pour effectuer une  des problèmes ( p. ex., méthode de la dichotomie, 
sortie exceptionnelle ). méthode empirique, représentation graphique ) .
c2.4  concevoir des algorithmes traitant des  c1.3  décrire les activités principales du dévelop-
exceptions ( p. ex., division par zéro, racine carrée  pement de logiciels ( p. ex., définition des besoins, 
d’un nombre négatif, 0° [zéro exposant zéro] ). conception, codage, vérification et validation ) et 
leurs produits livrables ( p. ex., cahier des charges, 
c2.5  comparer qualitativement et quantitative -
code source, résultats des tests ).
ment les performances de deux algorithmes 
qui répondent au même problème ( p. ex.,    c1.4  interpréter des échéanciers ( p. ex., calendrier 
type de données, nombre de lignes, usage de    des tâches, diagramme de Gantt, graphique PERT ).
la mémoire ).
c1.5  appliquer un plan de test ( p. ex., identifica -
tion des scénarios possibles, entrée des données, 
prédiction des résultats, comparaison avec les   Développement de programmes tudes informatiques
É
données de sortie ).   |  
c3.1   concevoir des fonctions répondant à des 
c1.6  présenter à l’oral comme à l’écrit les  besoins donnés ( p. ex., calcul de formule, 
 ANNÉE produits livrables ( p. ex., cahier des charges,  e encapsulation d’un bloc de code, répétition   
algorithme, résultat des tests ) en utilisant les  d’un bloc d’instructions ).
termes justes en français.  À LA 12
e c3.2  modéliser un problème de programmation 
en utilisant diverses techniques ( p. ex., organi -
gramme, langage de modélisation UML, dia -   Conception d’algorithmes
gramme de flux, pseudocode ). 
c2.1  concevoir des algorithmes qui répondent   
c3.3  appliquer le principe de modularisation au  à des problèmes mathématiques donnés   
développement de programmes ( p. ex., en    ( p. ex., calcul de la longueur du troisième côté 
créant des fonctions pour éviter la duplication de  d’un triangle rectangle lorsque les deux premiers 
blocs de code, en créant des classes, en séparant  côtés sont connus, affichage des nombres premiers 
au besoin le code en plusieurs fichiers ). inférieurs à 100 ).
E CURRICULUM DE L’ONTARIO, DE LA 10 L
50

c3.4  concevoir des interfaces utilisateurs   
conviviales ( p. ex., interface d’une console,    Introduction au génie informatique
interface d’une page Web, interface graphique ) 
qui répondent aux besoins des utilisatrices   
et utilisateurs.
c3.5  développer des programmes répondant à 
des problèmes donnés en utilisant des modules 
préalablement conçus à cet effet ( p. ex., fonction, 
interface utilisateur, documentation ) et des   
fonctions prédéfinies ( p. ex., générateur de   
nombres aléatoires, gestionnaire d’événements, 
convertisseur de chaînes de caractères ).
 
ICS3U
DÉVELOPPEMENT
 DE
 LOGICIELS
51

d.  Enj Eux   sociét Aux   Et   pErsp Ectiv Es  
   prof Essionn Ell Es
 année e
1
ATTENTES  
À la fin du cours, l’élève doit pouvoir :
d1.   analyser des mesures favorables pour l’environnement et la santé publique concernant   
    l’utilisation du matériel informatique.
d2.   analyser diverses possibilités de carrière et de formation professionnelle en informatique.
CONTENUS  D’APPRENTISSAGE  
Pour satisfaire aux attentes, l’élève doit pouvoir :     
Cours préuniversitaire, 1
 Environnement et santé   Carrière et formation
d1.1  analyser l’impact de l’industrie de l’infor- d2.1  comparer des choix de carrière possibles en 
matique sur l’environnement et la santé publi- informatique ( p. ex., programmation, architecture 
que en identifiant les facteurs bénéfiques    d’entreprise, recherche ), notamment en ce qui   
( p. ex.,  modélisation des forces environnementales  a trait aux tâches à accomplir, aux conditions   
et  de leur impact au niveau planétaire, séquençage  salariales et aux possibilités d’avancement.
du génome humain, repliement des protéines ) et 
d2.2  répertorier les programmes de formation  les facteurs nuisibles  ( p. ex., volume et toxicité   
offerts en informatique en identifiant les    des déchets, consommation  électrique, utilisation   
préalables et les options éducatives qui    du papier ). 
existent en français.
d1.2  évaluer l’impact des mesures prises par les 
d2.3  identifier des occasions et des moyens  organismes publics ( p. ex., création de normes 
d’obtenir de l’expérience en informatique    environnementales, mesure fiscale, subvention )   
( p. ex., bénévolat, éducation coopérative, salon    et privés ( p. ex., initiative des fabricants de   
de l’emploi, mentorat ). matériel informatique, action d’une association   
proenvironnementale, initiative individuelle )    d2.4  décrire des services de soutien qui favorisent 
sur l’empreinte environnementale de  l’orientation vers des métiers non traditionnels 
l’informatique.  tudes informatiques en informatique ( p. ex., programme de mentorat, 
É
groupe de soutien virtuel, programme postsecon -   |   d1.3  déterminer des stratégies pour réduire la 
daire spécialisé, association syndicale ).  consommation des systèmes informatiques,   
 ANNÉE et pour réutiliser et recycler du matériel    e d2.5  décrire les compétences essentielles ( p. ex., 
informatique ( p. ex., éteindre le moniteur en    communication verbale, prise de décisions, réso -
fin de journée, réaffecter des ordinateurs obsolètes  lution de problèmes ) ainsi que les habitudes de 
 À LA 12 e
à des tâches plus appropriées, recycler les    travail ( p. ex., habitudes associées à la sécurité   
cartouches d’encre ). au travail, à la capacité de travailler en équipe   
et de façon autonome, à la fiabilité, au service  d1.4  décrire des moyens pour prévenir ( p. ex., 
à  la clientèle ) du Passeport-compétences de  poste de travail ergonomique, exercice muscu -
l’Ontario (PCO) qui sont indispensables pour  laire )  des problèmes de santé liés à l’usage des 
réussir dans l’industrie de l’informatique. ordinateurs ( p. ex., trouble musculosquelettique, 
trouble de la vue ). d2.6  créer un portfolio en sélectionnant les   
travaux  ou les réalisations ( p. ex., logiciel,     
code source, diagramme ) qui témoignent de ses 
habiletés, de ses compétences, de ses expériences 
et des certifications acquises en informatique.
E CURRICULUM DE L’ONTARIO, DE LA 10 L
52

Introduction à la programmation 
e
informatique, 11  année
cours précollégial   ICS3C
Ce cours initie l’élève aux techniques de programmation qui lui permettent de développer 
des programmes répondant aux besoins des utilisatrices et utilisateurs, notamment en ce 
qui a trait à l’interface utilisateur et à la présentation des données. Dans le cadre de divers 
projets illustrant le cycle de vie d’un logiciel, l’élève se familiarise avec l’environnement 
informatique de travail, et développe et débogue des programmes. Le cours amène aussi 
l’élève à explorer l’impact de l’industrie de l’informatique sur l’environnement et la santé 
publique ainsi que les diverses possibilités de carrière et de formation dans ce secteur.
Préalable :  Aucun

A.  Environn Em Ent inform Atiqu E  
  dE tr AvAil  
 année e
ATTENTES 1
À la fin du cours, l’élève doit pouvoir :
A1.    expliquer le fonctionnement d’un ordinateur personnel en utilisant les termes justes en français.
A2.    appliquer des techniques de gestion de fichiers.
A3.    utiliser des outils appropriés pour développer des programmes.
CONTENUS  D’APPRENTISSAGE   Cours précollégial, 1
Pour satisfaire aux attentes, l’élève doit pouvoir :   
A2.3  décrire plusieurs types de virus ( p. ex.,   Fonctionnement d’un   
attaque du système d’amorçage, macro dans un    ordinateur personnel
document de bureautique ) et autres programmes 
malveillants ( p. ex., cheval de Troie, logiciel  A1.1  expliquer les fonctions des composants   
espion ), leur cycle de vie ainsi que les contre- matériels internes d’un ordinateur personnel   
mesures de sécurité informatique connues    ( p. ex., carte mère, microprocesseur, mémoire vive, 
( p. ex., antivirus, coupe-feu, blocage de fenêtres,  carte vidéo, carte son ).
filtre antipourriel ).
A1.2  expliquer les fonctions des périphériques 
A2.4  expliquer des raisons motivant l’adoption  externes qui sont couramment utilisés ( p. ex., 
d’une politique d’utilisation des ordinateurs et  souris, clavier, moniteur, imprimante, appareil 
du réseau local ( p. ex., respect de la vie privée,  photo numérique, caméra, clé de mémoire ).
équité, maintenance informatique ).
A1.3  comparer les performances du matériel  infor -
A2.5  utiliser les services du réseau local ( p. ex.,  matique de divers ordinateurs personnels  en 
partage de fichier et d’imprimante, centralisation  utilisant des mesures objectives ( p. ex., fréquence 
du code et de l’échéancier ) pour faciliter la gestion  du microprocesseur [en gigahertz], capacité de   
et la sauvegarde des fichiers lors du développe - la mémoire vive [en gigaoctets], consommation   
ment  d’un programme. électrique [en watts] ).
tudes informatiques A1.4  comparer les caractéristiques majeures des  É
  |   différents types d’accès à Internet ( p. ex., câble   Outils de développement
de radiotélévision, ligne d’abonné numérique, 
A3.1  expliquer les fonctions respectives des    ligne commutée, accès sans fil ).  ANNÉE
e
systèmes d’exploitation ( p. ex., exécution de   
programmes, archivage de fichiers, contrôle 
 À LA 12 d’accès ) et des logiciels d’application ( p. ex.,    Gestion de fichiers e
traitement de texte, lecture de courriels ),   
A2.1  répertorier les fichiers d’un programme en  notamment des outils de développement   
utilisant les fonctions du système d’exploitation. ( p. ex., compilateur, interpréteur ). 
A2.2  appliquer une procédure systématique de  A3.2  expliquer les caractéristiques et les avantages  
sauvegarde des fichiers ( p. ex., archivage pro - de divers environnements de développement 
grammé de fichiers, copie manuelle sur une clé de  intégrés (EDI) pour développer des programmes.  
mémoire ou en ligne, utilisation d’un système de   
A3.3  utiliser les commandes d’un EDI requises pour  contrôle de versions ).
éditer, exécuter et déboguer des programmes.  
A3.4  utiliser l’aide disponible ( p. ex., fonction 
E CURRICULUM DE L’ONTARIO, DE LA 10 d’aide de l’EDI, tutoriel, aide en ligne ) pour  L
développer des programmes.
54

Introduction à la programmation informatique
B.  tE chniqu Es d E progr Amm Ation  
ATTENTES  
À la fin du cours, l’élève doit pouvoir :
B1.   appliquer des techniques de traitement des données utilisant des variables et des expressions.
B2.   développer des programmes qui utilisent des structures de contrôle.
B3.   appliquer des techniques d’assurance-qualité logicielle.
CONTENUS  D’APPRENTISSAGE  
Pour satisfaire aux attentes, l’élève doit pouvoir :   
B2.3  intégrer une imbrication de structures de   Traitement des données
contrôle ( p. ex., une structure itérative contenant 
une structure décisionnelle ) dans un programme. B1.1  décrire les types de données primitifs définis 
par un langage de programmation donn é   
( p. ex., nombre entier, nombre décimal, caractère 
  Assurance-qualité logicielle alphanumérique ).
ICS3C
B3.1  expliquer la différence entre les erreurs de  B1.2  expliquer les règles ( p. ex., portée, durée de 
logique, les erreurs de syntaxe et les erreurs  vie ) qui s’appliquent à la gestion de la mémoire 
d’exécution d’un programme.  ( p. ex., variable locale ou globale, paramètre 
d’une fonction ).
B3.2  interpréter les messages d’erreur émis 
par les environnements de développement  B1.3  utiliser différents types de données ( p. ex., 
et d’exécution ( p. ex., compilateur, outil de  nombre entier, valeur booléenne, chaîne de   
débogage, machine virtuelle ). caractères ) dans un programme.
B3.3  corriger des erreurs de logique, des erreurs  B1.4  manipuler des données dans un programme 
de syntaxe et des erreurs d’exécution d’un    en utilisant des constantes et des variables. 
programme.
B1.5  appliquer des techniques de manipulation   
B3.4  déterminer un ensemble de valeurs appro - des chaînes de caractères ( p. ex., échange de   
priées pour tester l’exactitude d’un programme. caractères, dénombrement ).
B3.5  déboguer des programmes à l’aide de    B1.6  rédiger des expressions utilisant des opéra -
différentes méthodes ( p. ex., traçage, exécution  teurs ( p. ex., opérateur booléen, opérateur de   
pas à pas, utilisation de points d’interruption,  comparaison, opérateur arithmétique ).
observation des variables, insertion d’instructions 
dans le programme ).
  Structures de contrôle
B3.6  appliquer des règles de mise en page   
( p. ex., tabulation ), de rédaction ( p. ex.,    B2.1  développer un programme qui traite l’infor-
TECHNIQUES DE PROGRAMMATION commentaire ) et de nomenclature ( p. ex.,    mation entrée par l’utilisatrice ou l’utilisateur 
nom de variable ) au programme afin d’en  pour répondre à un problème donné ( p. ex., 
assurer sa maintenance et sa documentation.  déterminer si une année donnée est bissextile ) en 
utilisant une ou plusieurs structures de contrôle.
B2.2  utiliser les structures de contrôle – séquen -
tielle, alternative et itérative – dans un   
programme pour résoudre des problèmes   
( p. ex., minuterie, détermination de la valeur 
minimale ).
55

c.  dév Elopp Em Ent d E logici Els
ATTENTES  
À la fin du cours, l’élève doit pouvoir :  année
e
1
c1.    appliquer des techniques de développement de logiciels. 
c2.    concevoir des algorithmes répondant aux problèmes donnés.
c3.    développer des programmes répondant aux problèmes donnés.
CONTENUS  D’APPRENTISSAGE  
Pour satisfaire aux attentes, l’élève doit pouvoir :   
Cours précollégial, 1 c2.2  concevoir des algorithmes répondant à des              
 Techniques de développement   
problèmes de mathématiques tirés de la vie    de logiciels
courante ou à des applications scientifiques   
( p. ex., calcul de salaire brut, de la trajectoire    c1.1  décrire des problèmes en termes de données 
d’un missile, de la consommation d’essence ). d’entrée, de traitement de données et de   
données de sortie.
c2.3  concevoir des algorithmes traitant des   
exceptions ( p. ex., division par zéro, racine carrée  c1.2  utiliser différentes approches pour résoudre 
d’un nombre négatif, 0° [zéro exposant zéro] ). des problèmes ( p. ex., méthode de la dichotomie, 
méthode empirique, représentation graphique ).
c2.4  comparer différents algorithmes qui   
répondent au même problème. c1.3  décrire les activités principales du développe -
ment de logiciels ( p. ex., définition des  besoins, 
conception, codage, vérification et validation )   
 Développement de programmes et leurs produits livrables ( p. ex., cahier des 
charges, code source, résultats des tests ). c3.1  modéliser un problème de programmation 
en utilisant diverses techniques ( p. ex., organi - c1.4  interpréter des échéanciers ( p. ex., calendrier 
gramme, langage de modélisation UML, dia - des tâches, diagramme de Gantt, graphique PERT ).
gramme de flux, pseudocode ). 
c1.5  appliquer un plan de test ( p. ex., identifica -
c3.2  développer des sous-programmes ( p. ex., procé - tion des scénarios possibles, entrée des données, 
dure, fonction, macro ) qui répondent à un problème  prédiction des résultats, comparaison avec les 
tudes informatiques É
donné ( p. ex., calcul de puissance, affichage d’un    données de sortie ).
  |   élément visuel, manipulation d’une donnée ).
c1.6  présenter à l’oral comme à l’écrit les produits 
c3.3  appliquer le principe de modularisation     ANNÉE livrables ( p. ex., cahier des charges, algorithme,  e
au développement de programmes ( p. ex.,    résultat des tests ) en utilisant les termes justes   
en créant des sous-programmes pour éviter la    en français.
 À LA 12 e duplication de blocs de code, en séparant au   
besoin le code en plusieurs fichiers ).
  Conception d’algorithmes
c3.4  concevoir des interfaces utilisateurs convi-
viales ( p. ex., interface d’une console, interface  c2.1  concevoir des algorithmes employant 
d’une page Web, interface graphique )   qui répon - des structures de contrôle ( p. ex., utilisation 
dent aux besoins des utilisatrices et utilisateurs.   d’un compteur ou d’une valeur sentinelle dans 
une structure itérative ) pour répondre à des 
c3.5  développer des programmes répondant à 
problèmes donnés ( p. ex., entrée de données, 
des problèmes donnés en utilisant des modules 
contrainte de temps dans un jeu, interaction   
préalablement conçus à cet effet ( p. ex., fonction, 
avec l’utilisatrice ou l’utilisateur ).
interface utilisateur, documentation ) et des fonc -
tions prédéfinies ( p. ex., générateur de nombres  E CURRICULUM DE L’ONTARIO, DE LA 10
L aléatoires, gestionnaire d’événements, convertisseur 
de chaînes de caractères ).
56

Introduction à la programmation informatique
d.  Enj Eux sociét Aux  Et   
  pErsp Ectiv Es prof Essionn Ell Es   
ATTENTES  
À la fin du cours, l’élève doit pouvoir :
d1.   déterminer des mesures favorables pour l’environnement et la santé publique concernant   
    l’utilisation du matériel informatique.
d2.   décrire diverses possibilités de carrière en informatique, en y associant les exigences sur le plan   
    de la formation et de la reconnaissance professionnelle.
CONTENUS  D’APPRENTISSAGE  
Pour satisfaire aux attentes, l’élève doit pouvoir :   
notamment en ce qui a trait aux tâches à   Environnement et santé
 
accomplir, aux conditions salariales et aux   
possibilités d’avancement.  d1.1  expliquer l’impact de l’industrie de l’infor-
ICS3C matique sur l’environnement et la santé publi-
d2.2  répertorier les programmes de formation  que en identifiant  les facteurs  bénéfiques   
offerts en informatique en identifiant les    ( p. ex., modélisation des forces environnementales 
préalables et les options éducatives qui    et de leur impact au niveau planétaire, séquençage 
existent en français.   du génome humain, repliement des protéines )  et 
les facteurs nuisibles  ( p. ex., volume et toxicité    d2.3  identifier des occasions et des moyens 
des déchets, consommation électrique, utilisation    d’obtenir de l’expérience en informatique   
du papier ) . ( p. ex., bénévolat, éducation coopérative, salon   
de l’emploi, mentorat ). d1.2  décrire des initiatives dans le domaine   
technologique ( p. ex., projets et programmes    d2.4  décrire des services de soutien qui favorisent 
gouvernementaux, privés ou communautaires )    l’orientation vers des métiers non traditionnels 
qui font la promotion d’une gestion durable    en informatique ( p. ex., programme de mentorat, 
et de la protection de l’environnement.  groupe de soutien virtuel, programme postsecon -
daire spécialisé, association syndicale ).  d1.3  déterminer des stratégies pour réduire la 
EN consommation des systèmes informatiques,    d2.5  décrire les compétences essentielles ( p. ex., 
jEU et pour réutiliser et recycler du matériel    communication verbale, prise de décisions, réso -
x SOCIÉTAU informatique ( p. ex., éteindre le moniteur en fin    lution de problèmes ) ainsi que les habitudes de 
de journée, réaffecter des ordinateurs obsolètes    travail ( p. ex., habitudes associées à la sécurité   
à des tâches mieux appropriées, recycler les    au travail, à la capacité de travailler en équipe 
cartouches d’encre ). et de façon autonome, à la fiabilité, au service 
x ET PERSPECTIVES PROFESSIONNELLES
à la clientèle ) du Passeport-compétences de  d1.4  décrire des moyens pour prévenir ( p. ex., 
l’Ontario (PCO) qui sont indispensables pour  poste de travail ergonomique, exercice muscu -
réussir dans l’industrie de l’informatique. laire ) des problèmes de santé liés à l’usage des 
ordinateurs ( p. ex., trouble musculosquelettique,  d2.6  créer un portfolio en sélectionnant les travaux 
trouble de la vue ). ou les réalisations ( p. ex., logiciel, code source, 
diagramme ) qui témoignent de ses habiletés,   
de ses compétences, de ses expériences et des 
  Carrière et formation
certifications acquises en informatique.
d2.1  comparer des choix de carrière possibles en 
informatique ( p. ex., programmation, développe -
ment de sites Web, administration de systèmes ), 
57



e
Génie informatique, 12  année
cours préuniversitaire     ICS4U
Dans ce cours, l’élève approfondit ses connaissances théoriques liées au développement 
de logiciels, aux algorithmes et aux structures de données élémentaires, ainsi que ses 
habiletés pratiques en concevant des fonctions récursives et en développant des   
programmes de recherche et de tri. Dans le cadre d’un projet d’envergure en équipe, 
l’élève applique des techniques de développement et de gestion du cycle de vie du 
logiciel. Le cours amène aussi l’élève à explorer les enjeux sociétaux, les progrès en   
informatique ainsi que les possibilités de carrière et de formation professionnelle dans   
ce secteur.
e Préalable :  Introduction à l’informatique, 11  année, cours préuniversitaire

A.  tE chniqu Es d E progr Amm Ation
ATTENTES  année
e
À la fin du cours, l’élève doit pouvoir :
A1.    appliquer les règles de syntaxe et de sémantique d’un langage de programmation. 
A2.    analyser des algorithmes et des structures de données.
A3.    documenter un logiciel afin d’en faciliter sa maintenabilité.
CONTENUS  D’APPRENTISSAGE  
Pour satisfaire aux attentes, l’élève doit pouvoir :   
A2.5  manipuler des fichiers en lecture et en      Syntaxe et sémantique
écriture ( p. ex., base de données, fichier binaire, 
Cours préuniversitaire, 12
fichier XML ) à l’aide d’un programme. A1.1  dégager les principes de la conception   
modulaire ( p. ex., découpage en sous-problèmes 
A2.6  analyser des algorithmes qui permettent  simples, utilisation du code existant, travail à 
de rechercher et de trier des données ( p. ex.,  partir d’interfaces définies ).
recherche linéaire, tri à bulles, tri par insertion ).
A1.2  appliquer les règles de syntaxe d’un langage 
A2.7  comparer l’efficacité et la complexité    de programmation.
d’algorithmes donnés ( p. ex., recherche   
linéaire, recherche dichotomique ). A1.3  appliquer des stratégies de décomposition   
du code d’un logiciel en plusieurs fichiers   
( p. ex., classe, constante, fonction ). 
  Documentation d’un logiciel
A1.4  appliquer les règles de syntaxe et de   
A3.1  comparer des ressources documentaires    sémantique d’un langage de programmation 
( p. ex., bloc de code partagé sur Internet, interface  telles que celles gouvernant les opérateurs 
de programmation [API], tutoriel ) servant à  arithmétiques et logiques ( p. ex., division   
développer et à déboguer des programmes. euclidienne, arithmétique des nombres réels, 
expression logique composée ).
A3.2  documenter le code source d’un programme 
en suivant les normes de l’industrie ( p. ex., nom 
et signification des variables, brève explication de    Algorithmes et structures   
tudes informatiques l’algorithme principal ) et en utilisant des outils  É
 de données
  |   du langage de programmation ( p. ex., générateur 
automatique de documentation ).  A2.1  décrire des structures de données avancées   
et les règles de transtypage qui y sont associées     ANNÉE e
A3.3  documenter un protocole de vérification et de    ( p. ex., structure définie par la programmeuse  ou   
validation d’un programme ( p. ex., essai unitaire,  le programmeur, conversion d’une chaîne de   
test d’intégration, test de non-régression ).  À LA 12 e caractères en nombre ).
A3.4  rédiger, en utilisant les termes justes en  A2.2  définir le concept de type de données abstrait 
français, une documentation externe appropriée  et ses avantages en programmation.
( p. ex., fichier d’aide, guide d’installation,  manuel 
de l’utilisateur, foire aux questions [FAQ] )   qui  A2.3  définir le concept de récursivité et ses   
est destinée à l’utilisatrice ou l’utilisateur d’un  applications ( p. ex., calcul des éléments de la 
logiciel donné.  suite de Fibonacci ).
A2.4  analyser des algorithmes qui permettent   
de manipuler des tableaux à une ou à deux 
dimensions ( p. ex., tableau de coordonnées de 
géopositionnement, tableau de structures ).
E CURRICULUM DE L’ONTARIO, DE LA 10 L
60

B.  dév Elopp Em Ent d E logici Els
Génie informatique ATTENTES  
À la fin du cours, l’élève doit pouvoir :
B1.    appliquer une méthodologie de développement de logiciels.
B2.    concevoir des algorithmes répondant aux problèmes donnés.
B3.    développer des logiciels répondant aux problèmes donnés.
CONTENUS  D’APPRENTISSAGE  
Pour satisfaire aux attentes, l’élève doit pouvoir :      
B2.2  concevoir des algorithmes pour manipuler,                Méthodologie de développement   
rechercher et trier les éléments d’un tableau      de logiciels
à deux dimensions ( p. ex., multiplication de 
matrices par un nombre entier, permutation    B1.1  élaborer un cahier des charges détaillé ( p. ex., 
des éléments, recherche linéaire, tri à bulle ). analyse fonctionnelle, analyse non fonctionnelle, 
domaine ) présentant les conclusions de l’analyse  ICS4U
B2.3   concevoir des algorithmes récursifs ( p. ex., 
des besoins de la cliente ou du client.
calcul de factorielle, conversion d’un nombre   
entier en chaîne de caractères, tri par fusion,    B1.2  élaborer un plan de projet en identifiant 
programmation de fractales, traitement de    clairement les étapes du cycle de développe -
fichier XML ). ment du logiciel, les produits livrables et les 
stratégies de travail ( p. ex., rôles et responsabilités, 
tâches à réaliser, protocole de communication ).
 Développement de logiciels
B1.3  tenir à jour un calendrier des tâches   
B3.1  modéliser un problème à l’aide d’une  ( p. ex., indiquer ce qui est fait, ce qui reste   
hiérarchie de classes ou d’un catalogue    à faire, comment, par qui ).
de fonctions.
B1.4  utiliser les outils de développement de 
B3.2  concevoir l’architecture d’un logiciel ( p. ex.,  logiciels et de gestion de projets appropriés 
définition de classes, utilisation du langage de  ( p. ex., système de contrôle de versions, tableur, 
modélisation UML )  en respectant son cahier    calendrier, forum, wiki, outil graphique ).
des charges.
B1.5  appliquer des techniques de vérification de 
B3.3  appliquer le principe de modularisation  lors  logiciels ( p. ex., relecture du code par ses pairs, 
de la conception d’un logiciel ( p. ex.,  réutiliser  essai unitaire, test d’acceptation ). 
des fonctions ou des objets, utiliser des interfaces, 
B1.6  comparer des stratégies de distribution d’un  utiliser un modèle de conception adaptateur ).
logiciel ( p. ex., logiciel payant ou gratuit, licence 
B3.4  appliquer des techniques professionnelles    propriétaire ou libre, format des fichiers ) et de 
( p. ex., travail en équipe, réusinage, relecture  du code  suivi ( p. ex., mise à jour, soutien technique, 
par ses pairs, rédaction de commentaires ) pour  DÉVELOPPEMENT développement futur ) en tenant compte des 
développer des logiciels. objectifs du cahier des charges.
B3.5  développer chaque module d’un logiciel en 
respectant les critères du design ( p. ex., élaborer    Conception d’algorithmes
des interfaces utilisateurs, concevoir des algo -
 DE rithmes, rédiger un code source gérant l’entrée    B2.1  concevoir des algorithmes pour comparer 
et la sortie ).  LOGICIELS des types de données non primitifs ( p. ex., 
chaîne de caractères, tableau, type de données 
défini par la programmeuse ou le programmeur ).
61

c.    Enj Eux sociét Aux  Et   
  pErsp Ectiv Es prof Essionn Ell Es   
 année e
ATTENTES  
À la fin du cours, l’élève doit pouvoir :
c1.   analyser les enjeux sociétaux de diverses activités informatiques. 
c2.   évaluer l’incidence des progrès en informatique dans divers secteurs d’activité.
c3.   évaluer ses options de carrière et de formation professionnelle en informatique.
CONTENUS  D’APPRENTISSAGE  
Pour satisfaire aux attentes, l’élève doit pouvoir :   
Cours préuniversitaire, 12
c2.2  décrire divers progrès réalisés en infor -  Enjeux sociétaux
matique  ( p. ex., sécurité des réseaux, interface 
homme-machine, Web, système d’exploitation,  c1.1  expliquer les implications éthiques de divers es 
informatique mobile, bio-informatique ). activités informatiques ( p. ex., respect de la 
nétiquette, contribution au développement de   
c2.3  évaluer ( p. ex., à partir d’une recherche ) les  gratuiciels, monopolisation de la bande passante 
retombées des progrès en informatique  ( p. ex.,  du réseau, consultation de documents privés ).
architecture des microprocesseurs, théorie de la 
complexité, intelligence artificielle, robotique ). c1.2  analyser les enjeux sociaux et économiques 
posés par les technologies de l’information 
c2.4  présenter son projet à un auditoire cible,  et des communications ( p. ex., application du 
oralement ou par écrit, en utilisant un mode  droit d’auteur, respect des libertés individuelles, 
de présentation approprié ( p. ex., présentation  adaptation des modèles d’entreprise, sécurité des 
multimédia, rapport ) et les termes justes en  systèmes informatiques ).
français.
c1.3  expliquer certains procédés malhonnêtes   
( p.  ex., plagiat, porte dérobée, virus ) et la perti -
  Carrière et formation nence de se munir d’un code de déontologie   
en informatique tel que ceux suggérés par des 
c3.1  évaluer ses champs d’intérêt, ses caractéris -
associations professionnelles reconnues. tudes informatiques
tiques et ses habiletés en fonction de diverses  É
options de carrière en informatique ( p. ex.,      |  
programmeuse ou programmeur, analyste en    Progrès en informatique
informatique de gestion, gestionnaire de projet ).  ANNÉE e
c2.1  expliquer le rôle de l’informatique dans le 
c3.2  expliquer pourquoi la maîtrise du français 
développement de nouveaux produits et dans 
constitue un atout sur le marché du travail.  À LA 12 e
le développement de la connaissance dans 
d’autres disciplines ( p. ex., radio cognitive,    c3.3  expliquer les raisons pour lesquelles les 
authentification universelle des personnes,   entreprises valorisent l’apprentissage autonome 
nanotechnologie, économie, exploration spatiale,  et continu en informatique ( p. ex., apprentissage 
production artistique ).  électronique, implication dans des projets de 
développement de logiciels libres, contribution   
au développement de normes techniques ).
E CURRICULUM DE L’ONTARIO, DE LA 10 L
62

c3.4  évaluer ses compétences essentielles et  ses 
habitudes de travail en fonction de celles 
qui sont répertoriées dans le Passeport-
compétences de l’Ontario (PCO).
c3.5  maintenir à jour le contenu de son portfolio   
Génie informatique ( p. ex., logiciel produit, extrait de code source,   
rapport de stage ) afin de mettre en évidence   
le développement de ses apprentissages, de   
ses compétences et de ses habiletés en informa -
tique ainsi que toutes certifications et forma -
tions reconnues.  
ICS4U
ENjEU
x 
SOCIÉTAU
x 
ET
 PERSPECTIVES
 PROFESSIONNELLES
 
63



Programmation informatique,   
e
12  année
cours précollégial     ICS4C
Dans ce cours, l’élève développe un logiciel muni d’une interface utilisateur graphique 
en utilisant un langage de programmation orientée objet. Dans le cadre d’un projet 
d’envergure réalisé en équipe, l’élève utilise les outils mis à sa disposition pour déve-
lopper  le logiciel et gérer des tâches diverses. Le cours amène aussi l’élève à explorer   
les  enjeux sociétaux, les progrès en informatique ainsi que les possibilités de carrière   
et de formation professionnelle dans ce secteur.
e Préalable :  Introduction à la programmation informatique, 11  année, cours précollégial 

A.  tE chniqu Es d E progr Amm Ation
ATTENTES
 année À la fin du cours, l’élève doit pouvoir : e
A1.    expliquer les principes de la programmation orientée objet.
A2.    appliquer des techniques de traitement des données utilisant des structures   
    de données et des fichiers.
A3.    documenter un logiciel afin d’en faciliter sa maintenabilité.
CONTENUS  D’APPRENTISSAGE  
Pour satisfaire aux attentes, l’élève doit pouvoir :   
Cours précollégial, 12
A2.6  appliquer des techniques de manipulation des   Programmation orientée objet
données externes ( p. ex., base de données, fichier 
séquentiel, fichier XML ) dans un programme.  A1.1  définir les concepts clés de la programma -
tion orientée objet ( p. ex., classe, objet, champ, 
méthode ).
  Documentation d’un logiciel
A1.2  dégager les avantages de la conception 
A3.1  identifier des ressources documentaires    modulaire ( p. ex., débogage, maintenance   
( p. ex., bloc de code partagé sur Internet, interface   informatique ).
de programmation [API], tutoriel ) servant à 
A1.3  définir les concepts de portée et de visibilité  développer et à déboguer des programmes.
dans un programme orienté objet. 
A3.2  documenter le code source d’un programme 
A1.4  expliquer des principes de la programmation  en suivant les normes de l’industrie ( p. ex., nom 
événementielle ( p. ex., Modèle-Vue-Contrôleur,  et signification des variables, valeur de retour 
écouteur d’événement ). d’une fonction, brève explication de l’algorithme 
principal ) et en utilisant des outils du langage 
de programmation. 
 Traitement des données
A3.3  documenter un protocole de vérification et de 
A2.1  rédiger des expressions constituées    validation d’un programme ( p. ex., essai unitaire, 
d’expressions imbriquées ( p. ex., liées par    test d’intégration, test de non-régression ).
des opérateurs logiques ou arithmétiques ). tudes informatiques É
A3.4  rédiger, en utilisant les termes justes en    |  
A2.2  résoudre des problèmes concrets en utilisant  français, une documentation externe appro -
divers formats ( p. ex., de date, de prix ) et divers    priée ( p. ex., fichier d’aide, guide d’installation, 
 ANNÉE e types de données ( p. ex., nombre décimal, chaîne 
manuel de l’utilisateur, foire aux questions 
de caractères ).  [FAQ] ) qui est destinée à l’utilisatrice ou 
 À LA 12 l’utilisateur d’un logiciel donné. e A2.3  appliquer des techniques de manipulation 
des chaînes de caractères ( p. ex., validation de 
l’entrée des données, conversion numérique )   
  dans un programme.
A2.4  définir les caractéristiques d’un tableau telles 
que les éléments, l’indice, la taille et la dimension .
A2.5  concevoir une méthode pour manipuler le 
contenu d’un tableau à une ou à deux dimen -
sions ( p. ex., insertion, suppression, modification ).
E CURRICULUM DE L’ONTARIO, DE LA 10 L
66

B.  dév Elopp Em Ent d E logici Els
Programmation informatique
ATTENTES
À la fin du cours, l’élève doit pouvoir :
B1.    appliquer une méthodologie de développement de logiciels.
B2.    concevoir des algorithmes répondant aux problèmes donnés. 
B3.    développer un logiciel muni d’une interface utilisateur graphique en utilisant les principes   
    de la programmation orientée objet.
CONTENUS  D’APPRENTISSAGE  
Pour satisfaire aux attentes, l’élève doit pouvoir :   
B2.3  concevoir des algorithmes pour arrondir des   Méthodologie de développement   
quantités avec une précision donnée ( p. ex.,    de logiciels
calcul de la monnaie à rendre, amortissement du 
matériel informatique de l’école, conversion de  B1.1  définir les étapes du développement d’un 
volumes pour une recette de cuisine ). logiciel selon la méthodologie adoptée.
ICS4C
B2.4  concevoir des algorithmes pour valider les  B1.2  élaborer un cahier des charges présentant 
données entrées par l’utilisatrice ou l’utilisateur  les conclusions de l’analyse des besoins des 
( p. ex., majuscule manquante, texte trop long,  clientes et clients.
nombre trop grand, code postal ou numéro de 
B1.3  élaborer un calendrier de soumission des  téléphone incorrect ). 
produits livrables en utilisant des outils de 
gestion de projet ( p. ex., logiciel de gestion de 
projet, diagramme de Gantt, graphique PERT ).   Développement de logiciels
B1.4  tenir à jour un calendrier des tâches ( p. ex.,  B3.1  modéliser un problème en utilisant diverses 
indiquer ce qui est fait, ce qui reste à faire,    techniques ( p. ex., diagramme UML, pseudocode, 
comment, par qui ) en utilisant des outils de  diagramme de Gantt ) propres à la programma -
travail collaboratif appropriés ( p. ex., courriel,  tion orientée objet. 
blogue, babillard électronique, calendrier partagé   
B3.2  définir des classes qui modélisent les objets  en ligne ). 
conceptuels du problème à résoudre. 
B1.5  appliquer un protocole de vérification et de 
B3.3  définir des méthodes ( p. ex., accesseur,    validation d’un programme. 
mutateur,  méthode d’instance, méthode de classe ) 
avec ou sans arguments pour répondre à divers 
problèmes donnés.    Conception d’algorithmes
B3.4  concevoir des interfaces graphiques adaptées  B2.1  expliquer un algorithme  (p. ex., recherche 
aux besoins des utilisatrices et utilisateurs    linéaire)  dans un tableau à une dimension.
en respectant les règles de design d’un   
DÉVELOPPEMENT B2.2  concevoir des algorithmes pour résoudre   
environnement graphique fenêtré et en   
divers problèmes concrets impliquant des    appliquant des normes régissant l’accessibilité .
calculs mathématiques ( p. ex., calculer la 
B3.5  identifier les éléments d’une interface    quantité de peinture nécessaire pour décorer un 
utilisateur graphique qui ne se conforment    appartement, estimer les coûts de la consommation 
pas aux critères prédéfinis ( p. ex., norme    énergétique d’un foyer, calculer le volume d’eau   DE
régissant l’accessibilité, norme élaborée en classe ).  contenu dans un aquarium ).  LOGICIELS
67

B3.6  intégrer dans un programme des méthodes 
d’un objet ( p. ex., recherche, triage, conversion 
numérique ) et des structures de données ( p. ex., 
tableau, vecteur, table de hachage ) prédéfinies 
dans le langage de programmation utilisé   
ou faisant partie d’une bibliothèque externe   
( p. ex., interface de programmation AJAX ).
 année B3.7  développer un logiciel qui répond aux    e
événements générés par l’utilisatrice ou 
l’utilisateur au moyen de l’interface   
utilisateur graphique.
 
Cours précollégial, 12
tudes informatiques É
  |  
 ANNÉE e
 À LA 12 e
E CURRICULUM DE L’ONTARIO, DE LA 10 L
68

c.    Enj Eux sociét Aux  Et   
Programmation informatique
  pErsp Ectiv Es prof Essionn Ell Es   
ATTENTES  
À la fin du cours, l’élève doit pouvoir :
c1.   analyser les enjeux sociétaux de diverses activités informatiques. 
c2.   décrire les progrès en informatique.
c3.   déterminer ses options de carrière et de formation professionnelle en informatique.
CONTENUS  D’APPRENTISSAGE  
Pour satisfaire aux attentes, l’élève doit pouvoir :   
 Enjeux sociétaux   Carrière et formation
c1.1  expliquer les implications éthiques de diverses  c3.1  déterminer parmi diverses options de carri ère 
activités informatiques ( p. ex., respect de la  en informatique ( p. ex., programmation, analyse  ICS4C
nétiquette, contribution au développement de    en informatique de gestion, administration de sys -
gratuiciels, monopolisation de la bande passante  tèmes ), celles qui correspondent à ses champs 
du réseau, consultation de documents privés ). d’intérêt, ses caractéristiques et ses habiletés.
c1.2  analyser les enjeux sociaux et économiques  c3.2  identifier des emplois et des possibilités de 
posés par les technologies de l’information  travail autonome en informatique ( p. ex., dével op-
et des communications ( p. ex., application du  peuse ou développeur d’applications pour des 
droit d’auteur, respect des libertés individuelles,  réseaux sociaux, développeuse ou développeur de 
adaptation des modèles d’entreprise, sécurité des  sites Web, expert-conseil spécialisé dans une ligne 
systèmes informatiques ). de produits commerciaux ou de logiciels libres ), 
où la maîtrise du français constitue un atout. 
c1.3  expliquer , en décrivant certains procédés 
malhonnêtes ( p. ex., plagiat, porte dérobée, virus ),   c3.3  décrire des modes de prestation du perfec -
la pertinence de se munir d’un code  de déonto- tionnement professionnel en cours d’emploi   
logie en informatique tel que ceux suggérés par  ( p. ex., éducation continue, apprentissage en ligne, 
des associations professionnelles reconnues. mentorat, conférence, atelier ) en informatique.
ENjEU
c3.4  décrire des services de soutien qui favorisent 
l’orientation vers des métiers non traditionnels  x    Progrès en informatique
SOCIÉTAU en informatique ( p. ex., programme de mentorat, 
c2.1  décrire l’évolution des langages de    groupe de soutien virtuel, programme postsecon -
programmation. daire spécialisé, association syndicale ).
x 
ET c2.2  citer des innovations récentes dans le  c3.5  évaluer ses compétences essentielles et ses   
 PERSPECTIVES
domaine de l’informatique ( p. ex., baladodiffu - habitudes de travail en fonction de celles qui   
sion, téléphonie sur IP, jeu en ligne massivement  sont répertoriées dans le Passeport-compétences 
multijoueurs, jeu vidéo publicitaire ). de l’Ontario (PCO).
c2.3  décrire des plateformes technologiques et des  c3.6  maintenir à jour le contenu de son portfolio    
 PROFESSIONNELLES
environnements de programmation novateurs  ( p. ex., logiciel produit, extrait de code source, rapport 
( p. ex., Web 2.0, téléphone intelligent, environ - de stage )  afin de mettre en évidence le développe -
nement sémantique ). ment de ses apprentissages, de ses compétences 
et  de ses habiletés en informatique ainsi que 
toutes certifications et formations reconnues. 
 
69





A1.1 expliquer les fonctions des composants matériels internes d’un ordinateur personnel. 
A1.2 expliquer les fonctions des périphériques externes qui sont couramment utilisés.
A1.3 comparer les performances du matériel informatique de divers ordinateurs personnels en utilisant des mesures objectives.
A1.4 expliquer la relation fonctionnelle entre un langage de programmation et les composants essentiels d’un ordinateur.

A2.1 répertorier les fichiers d’un programme en utilisant les fonctions du système d’exploitation.
A2.2 appliquer une procédure systématique de sauvegarde des fichiers. 
A2.3 décrire plusieurs types de virus. 
A2.4 utiliser les services du réseau local pour faciliter la gestion et la sauvegarde des fichiers. lors du développement d’un programme.


A3.1 comparer les principales fonctions des systèmes d’exploitation et des logiciels. d’application, notamment des outils de développement.
A3.2 expliquer les caractéristiques et les avantages de divers environnements de développement pour développer des programmes.
A3.3 utiliser les fonctions respectives d’un compilateur ou d’un interpréteur.
A3.4 utiliser l’aide disponible pour développer des programmes.


	
B1.1 décrire les types de données primitifs définis par un langage de programmation donné. 
B1.2 décrire la représentation interne  de divers types de données. 
B1.3 définir les termes suivants : valeur littérale, constante et variable.
B1.4 définir les concepts de portée et de durée de vie des variables.
B1.5 décrire différents types de fonctions.
B1.6 appliquer les règles de syntaxe fondamentales d’un langage de programmation.
B1.7 rédiger des expressions utilisant des opérateurs.
B2.1 définir les caractéristiques d’un tableau à une dimension telles que les éléments, l’indice et la taille.
B2.2 expliquer des algorithmes qui permettent de lire ou de modifier les éléments d’un tableau à une dimension.
B2.3 expliquer le fonctionnement des structures de contrôle – séquentielle, décisionnelle et itérative – d’un programme.
B2.4 expliquer des algorithmes qui permettent de traiter l’information entrée par une utilisatrice ou un utilisateur et d’afficher le résultat à l’écran.


B3.1 expliquer la différence entre les erreurs de logique, les erreurs de syntaxe et les erreurs d’exécution d’un programme.
B3.2 interpréter les messages d’erreur émis par les environnements de développement et d’exécution.
B3.3 corriger des erreurs de logique, des erreurs de syntaxe et des erreurs d’exécution d’un programme.
B3.4 déterminer un ensemble de valeurs appropriées pour tester l’exactitude d’un programme.
B3.5 déboguer des programmes à l’aide de différentes méthodes.
B3.6 appliquer des règles de mise en page, de rédaction et de nomenclature au programme afin d’en assurer sa maintenance et sa documentation.

c1.1 décrire les problèmes en termes de données d’entrée, de traitement de données et de données de sortie.
c1.2 utiliser différentes approches pour résoudre des problèmes.
c1.3 décrire les activités principales du développement de logiciels et leurs produits livrables.
c1.4 interpréter des échéanciers.
c1.5 appliquer un plan de test.
c1.6 présenter à l’oral comme à l’écrit les produits livrables en utilisant les termes justes en français.


c2.1 concevoir des algorithmes qui répondent à des problèmes mathématiques donnés.
c2.2 concevoir des algorithmes de traitement des données.
c2.3 concevoir des imbrications de structures de contrôle.
c2.4 concevoir des algorithmes traitant des exceptions.
c2.5 comparer qualitativement et quantitative- ment les performances de deux algorithmes qui répondent au même problème.

	
c3.1 concevoir des fonctions répondant à des besoins donnés.
c3.2 modéliser un problème de programmation en utilisant diverses techniques.
c3.3 appliquer le principe de modularisation au développement de programmes.
c3.4 concevoir des interfaces utilisateurs conviviales qui répondent aux besoins des utilisatrices et utilisateurs.
c3.5 développer des programmes répondant à des problèmes donnés en utilisant des modules
préalablement conçus à cet effet et des fonctions prédéfinies.


d1.1 analyser l’impact de l’industrie de l’informatique sur l’environnement et la santé publique en identifiant les facteurs bénéfiques et les facteurs nuisibles.
d1.2 évaluer l’impact des mesures prises par les organismes publics et privés sur l’empreinte environnementale de l’informatique.
d1.3 déterminer des stratégies pour réduire la consommation des systèmes informatiques, et pour réutiliser et recycler du matériel informatique.
d1.4 décrire des moyens pour prévenir des problèmes de santé liés à l’usage des ordinateurs.


d2.1 comparer des choix de carrière possibles en informatique, notamment en ce qui a trait aux tâches à accomplir, aux conditions salariales et aux possibilités d’avancement.
d2.2 répertorier les programmes de formation offerts en informatique en identifiant les préalables et les options éducatives qui existent en français.
d2.3 identifier des occasions et des moyens d’obtenir de l’expérience en informatique.
d2.4 décrire des services de soutien qui favorisent l’orientation vers des métiers non traditionnels en informatique.
d2.5 décrire les compétences essentielles ainsi que les habitudes de travail du Passeport-compétences de l’Ontario (PCO) qui sont indispensables pour réussir dans l’industrie de l’informatique.
d2.6 créer un portfolio en sélectionnant les travaux ou les réalisations qui témoignent de ses
habiletés, de ses compétences, de ses expériences et des certifications acquises en informatique.

